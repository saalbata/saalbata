import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

def load_and_preprocess(filepath):
    data = pd.read_csv(filepath)
    data['date'] = pd.to_datetime(data['date'])
    data = data[data['date'] > '2015-12-31']
    data.set_index('date', inplace=True)
    return data

btc_data = load_and_preprocess("BTC.csv")
ada_data = load_and_preprocess("ADA.csv")
eth_data = load_and_preprocess("ETH.csv")

def create_features(df):
    df['MA_5'] = df['close'].rolling(window=5).mean()
    df['MA_20'] = df['close'].rolling(window=20).mean()
    df['Return'] = df['close'].pct_change()
    df['Target'] = df['close'].shift(-1)
    df.dropna(inplace=True)
    return df

btc_data = create_features(btc_data)
ada_data = create_features(ada_data)
eth_data = create_features(eth_data)

btc_X = btc_data[['open', 'high', 'low', 'close', 'MA_5', 'MA_20', 'Return']]
btc_y = btc_data['Target']
ada_X = ada_data[['open', 'high', 'low', 'close', 'MA_5', 'MA_20', 'Return']]
ada_y = ada_data['Target']
eth_X = eth_data[['open', 'high', 'low', 'close', 'MA_5', 'MA_20', 'Return']]
eth_y = eth_data['Target']

btc_X_train, btc_X_test, btc_y_train, btc_y_test = train_test_split(btc_X, btc_y, test_size=0.2, shuffle=False)
ada_X_train, ada_X_test, ada_y_train, ada_y_test = train_test_split(ada_X, ada_y, test_size=0.2, shuffle=False)
eth_X_train, eth_X_test, eth_y_train, eth_y_test = train_test_split(eth_X, eth_y, test_size=0.2, shuffle=False)

btc_model = RandomForestRegressor(n_estimators=100, random_state=42)
btc_model.fit(btc_X_train, btc_y_train)
ada_model = RandomForestRegressor(n_estimators=100, random_state=42)
ada_model.fit(ada_X_train, ada_y_train)
eth_model = RandomForestRegressor(n_estimators=100, random_state=42)
eth_model.fit(eth_X_train, eth_y_train)

def predict_future_prices(model, last_known_data, num_days=7, feature_columns=None):
    predictions = []
    current_data = last_known_data.copy()
    for day in range(num_days):
        current_data_df = pd.DataFrame([current_data], columns=feature_columns)
        predicted_price = model.predict(current_data_df)[0]
        predictions.append(predicted_price)
        current_data['open'] = current_data['close']
        current_data['high'] = max(current_data['high'], predicted_price)
        current_data['low'] = min(current_data['low'], predicted_price)
        current_data['close'] = predicted_price
        current_data['MA_5'] = pd.Series(predictions[-5:]).mean() if len(predictions) >= 5 else current_data['MA_5']
        current_data['MA_20'] = pd.Series(predictions[-20:]).mean() if len(predictions) >= 20 else current_data['MA_20']
        current_data['Return'] = (predicted_price - current_data['close']) / current_data['close']
    return predictions

btc_latest_data = btc_data.iloc[-1][['open', 'high', 'low', 'close', 'MA_5', 'MA_20', 'Return']]
ada_latest_data = ada_data.iloc[-1][['open', 'high', 'low', 'close', 'MA_5', 'MA_20', 'Return']]
eth_latest_data = eth_data.iloc[-1][['open', 'high', 'low', 'close', 'MA_5', 'MA_20', 'Return']]

btc_future_prices = predict_future_prices(btc_model, btc_latest_data, num_days=7)
ada_future_prices = predict_future_prices(ada_model, ada_latest_data, num_days=7)
eth_future_prices = predict_future_prices(eth_model, eth_latest_data, num_days=7)

print("Predicted BTC Prices for the Next 7 Days:", btc_future_prices)
print("Predicted ADA Prices for the Next 7 Days:", ada_future_prices)
print("Predicted ETH Prices for the Next 7 Days:", eth_future_prices)
